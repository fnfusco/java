package application;

import java.util.Scanner;

import entities.Matriz;
import entities.Ordenacao;

public class Program {

	public static void main(String[] args) {
		int valorLimite = 9999;
		Ordenacao ordem = new Ordenacao();
		int[] vetor =  ordem.aleatorio(valorLimite);
		ordem.bobbleSort(vetor);
		ordem.insertSort(vetor);
		ordem.selectSort(vetor);
		ordem.quickSortChamada(vetor, 1, valorLimite-1);
		ordem.shellSort(vetor);
		ordem.mergeSortChamada(vetor, 1, valorLimite-1);
		ordem.heapSort(vetor);
		
	}

}



/*
 * Claro, aqui est√£o 20 exerc√≠cios de Java, do mais f√°cil ao mais dif√≠cil:

1. **Ol√°, Mundo!**
```java
// Escreva um programa que imprima "Ol√°, Mundo!" na tela.
```

2. **Soma de Dois N√∫meros**
```java
// Escreva um programa que some dois n√∫meros.
```

3. **Tabuada**
```java
// Escreva um programa que imprima a tabuada de um n√∫mero.
```

4. **Fatorial**
```java
// Escreva um programa que calcule o fatorial de um n√∫mero.
```

5. **Fibonacci**
```java
// Escreva um programa que imprima a sequ√™ncia de Fibonacci at√© um determinado n√∫mero.
```

6. **Pal√≠ndromo**
```java
// Escreva um programa que verifique se uma string √© um pal√≠ndromo.
```

7. **Ordena√ß√£o de Array**
```java
// Escreva um programa que ordene um array de inteiros.
```

8. **Busca Bin√°ria**
```java
// Implemente um algoritmo de busca bin√°ria.
```

9. **Maior e Menor Elemento de um Array**
```java
// Escreva um programa que encontre o maior e o menor elemento de um array.
```

10. **Invers√£o de String**
```java
// Escreva um programa que inverta uma string.
```

11. **Remo√ß√£o de Elementos Duplicados em um Array**
```java
// Escreva um programa que remova elementos duplicados de um array.
```

12. **N√∫mero Primo**
```java
// Escreva um programa que verifique se um n√∫mero √© primo.
```

13. **Subarray com a Maior Soma**
```java
// Escreva um programa que encontre o subarray cont√≠guo com a maior soma em um array de n√∫meros.
```

14. **Subsequ√™ncia Comum Mais Longa**
```java
// Escreva um programa que encontre a subsequ√™ncia comum mais longa entre duas strings.
```

15. **√Årvore Bin√°ria de Busca**
```java
// Implemente uma √°rvore bin√°ria de busca.
```

16. **Percorrimento em Profundidade de um Grafo**
```java
// Implemente o percorrimento em profundidade (DFS) de um grafo.
```

17. **Percorrimento em Largura de um Grafo**
```java
// Implemente o percorrimento em largura (BFS) de um grafo.
```

18. **Algoritmo de Dijkstra**
```java
// Implemente o algoritmo de Dijkstra para encontrar o caminho mais curto em um grafo.
```

19. **Algoritmo de Kruskal**
```java
// Implemente o algoritmo de Kruskal para encontrar a √°rvore geradora m√≠nima de um grafo.
```

20. **Algoritmo de Prim**
```java
// Implemente o algoritmo de Prim para encontrar a √°rvore geradora m√≠nima de um grafo.
```

Lembre-se de testar e depurar cada programa para garantir que ele funcione corretamente. Boa sorte com seus estudos de Java! üòä
 * */
